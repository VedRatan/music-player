# -*- coding: utf-8 -*-
"""music rec.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GDurGEIlMzPI0K1IaZ8tVo4SUAvFZokA
"""

from google.colab import drive

drive.mount("/content/gdrive")

import numpy as np
import pandas as pd

df = pd.read_csv("/content/gdrive/MyDrive/Music Rec/spotify.csv", sep=",")

df.shape

df.head()

df.isna().sum()

df = df[["id", "acousticness", "energy", "danceability", "instrumentalness", "liveness", "loudness", "speechiness", "tempo", "valence"]]

df.shape

df.head()

df.describe()

df.info()

df.corr()

df.head()

df.plot()

from sklearn.preprocessing import MinMaxScaler

scalers = dict()

for col_name in ["acousticness", "energy", "danceability", "instrumentalness", "liveness", "loudness", "speechiness", "tempo", "valence"]:
    minmax = MinMaxScaler()
    df[col_name] = minmax.fit_transform(df[[col_name]])
    scalers[col_name] = minmax

df.describe()

df.plot()

df_list = df.values.tolist()

embeddings = dict()

for i in range(len(df_list)):
    temp = df_list[i]
    key = temp[0]
    temp.pop(0)
    embeddings[key] = temp

len(embeddings)

df.shape

import tensorflow as tf
from tensorflow import keras

input_layer = keras.layers.Input(shape=(9,))
encoded = keras.layers.Dense(12, activation="relu")(input_layer)
encoded = keras.layers.Dense(15, activation="relu")(encoded)
encoded = keras.layers.Dense(17, activation="relu")(encoded)
encoded = keras.layers.Dense(20, activation="relu")(encoded)
decoded = keras.layers.Dense(17, activation="relu")(encoded)
decoded = keras.layers.Dense(15, activation="relu")(decoded)
decoded = keras.layers.Dense(12, activation="relu")(decoded)
decoded = keras.layers.Dense(9, activation="sigmoid")(decoded)

autoencoder = keras.Model(input_layer, decoded)
encoder = keras.Model(input_layer, encoded)
autoencoder.compile(optimizer="adam", loss="binary_crossentropy", metrics=["accuracy"])

data = list(embeddings.values())

len(data)

data[0]

hist = autoencoder.fit(data, data, epochs=10)

autoencoder.evaluate(data, data)

encodings = encoder.predict(data)

encodings.shape

key_list = list(embeddings.keys())

for i in range(len(key_list)):
    embeddings[key_list[i]] = encodings[i]

embeddings[list(embeddings.keys())[0]].shape

autoencoder.save("/content/gdrive/MyDrive/Music Rec/autoencoder.h5")

encoder.save("/content/gdrive/MyDrive/Music Rec/encoder.h5")

import pickle

with open("/content/gdrive/MyDrive/Music Rec/scalers.pkl", "wb") as f:
    pickle.dump(scalers, f)

with open("/content/gdrive/MyDrive/Music Rec/embeddings.pkl", "wb") as f:
    pickle.dump(embeddings, f)

